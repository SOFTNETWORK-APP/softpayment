syntax = "proto2";

import "scalapb/scalapb.proto";
import "google/protobuf/timestamp.proto";
import "model/payment/paymentUser.proto";
import "model/payment/transaction.proto";

package app.softnetwork.payment.message.TransactionEvents;

option (scalapb.options) = {
    single_file: true
    flat_package: true
    import: "app.softnetwork.persistence.message._"
    import: "app.softnetwork.persistence.model._"
    import: "app.softnetwork.serialization._"
    import: "app.softnetwork.payment.model._"
    import: "app.softnetwork.payment.message.PaymentEvents._"
    import: "app.softnetwork.protobuf.ScalaPBTypeMappers._"
    import: "app.softnetwork.payment.serialization._"
    preserve_unknown_fields: false
    preamble: "trait TransactionEvent extends PaymentEvent"
    preamble: "trait DebitedAccountEvent extends TransactionEvent with BroadcastEvent {def debitedAccount: String; val externalUuid: String = debitedAccount;}"
    preamble: "trait CreditedAccountEvent extends TransactionEvent with BroadcastEvent {def creditedAccount: String; val externalUuid: String = creditedAccount;}"
    preamble: "trait TransactionFailedEvent extends TransactionEvent with BroadcastEvent {def orderUuid: String; val externalUuid: String = orderUuid;}"
    preamble: "trait RecurringPaymentEvent extends DebitedAccountEvent {def debitedAmount: Int; def feesAmount: Int; def currency: String; def recurringPaymentRegistrationId: String; def frequency: RecurringPayment.RecurringPaymentFrequency}"
};

message PreAuthorizedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "DebitedAccountEvent";
    required string orderUuid = 1;
    required google.protobuf.Timestamp lastUpdated = 2 [(scalapb.field).type = "java.time.Instant"];
    required string debitedAccount = 3;
    required int32 debitedAmount = 4;
    required string transactionId = 5;
    required string paymentMethodId = 6;
    optional bool printReceipt = 7;
    required app.softnetwork.payment.model.Transaction.PaymentType paymentType = 8;
}

message PreAuthorizationFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}

message PaidInEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "DebitedAccountEvent";
    required string orderUuid = 1;
    required google.protobuf.Timestamp lastUpdated = 2 [(scalapb.field).type = "java.time.Instant"];
    required string debitedAccount = 3;
    required int32 debitedAmount = 4;
    required string currency = 5 [default = "EUR"];
    required string transactionId = 6;
    required string paymentMethodId = 7;
    required app.softnetwork.payment.model.Transaction.PaymentType paymentType = 8;
    optional bool printReceipt = 9;
}

message PayInFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}

message PaidOutEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "CreditedAccountEvent";
    required string orderUuid = 1;
    required google.protobuf.Timestamp lastUpdated = 2 [(scalapb.field).type = "java.time.Instant"];
    required string creditedAccount = 3;
    required int32 creditedAmount = 4;
    required int32 feesAmount = 5;
    required string currency = 6 [default = "EUR"];
    required string transactionId = 7;
    required app.softnetwork.payment.model.Transaction.PaymentType paymentType = 8;
    optional string externalReference = 9;
}

message PayOutFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
    optional string externalReference = 4;
}

message RefundedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "DebitedAccountEvent";
    required string orderUuid = 1;
    required google.protobuf.Timestamp lastUpdated = 2 [(scalapb.field).type = "java.time.Instant"];
    required string debitedAccount = 3;
    required int32 debitedAmount = 4;
    required int32 refundedAmount = 5;
    required string currency = 6 [default = "EUR"];
    required string refundTransactionId = 7;
    required string payInTransactionId = 8;
    required string reasonMessage = 9;
    required bool initializedByClient = 10;
    required app.softnetwork.payment.model.Transaction.PaymentType paymentType = 11;
}

message RefundFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}

message TransferedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "DebitedAccountEvent";
    optional string orderUuid = 1;
    required google.protobuf.Timestamp lastUpdated = 2 [(scalapb.field).type = "java.time.Instant"];
    required string debitedAccount = 3;
    required int32 debitedAmount = 4;
    required string creditedAccount = 5;
    required int32 feesAmount = 6;
    required string currency = 7 [default = "EUR"];
    required string transactionId = 8;
    required app.softnetwork.payment.model.Transaction.TransactionStatus transactionStatus = 9;
    required app.softnetwork.payment.model.Transaction.PaymentType paymentType = 10;
    optional string payOutTransactionId = 11;
    optional string externalReference = 12;
}

message TransferFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "DebitedAccountEvent";
    required string debitedAccount = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
    optional string externalReference = 4;
}

message DirectDebitedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "CreditedAccountEvent";
    required google.protobuf.Timestamp lastUpdated = 1 [(scalapb.field).type = "java.time.Instant"];
    required string creditedAccount = 2;
    required int32 debitedAmount = 3;
    required int32 feesAmount = 4;
    required string currency = 5 [default = "EUR"];
    required string transactionId = 6;
    required app.softnetwork.payment.model.Transaction.TransactionStatus transactionStatus = 7;
    optional string externalReference = 8;
}

message DirectDebitFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "CreditedAccountEvent";
    required string creditedAccount = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
    optional string externalReference = 4;
}

message FirstRecurringPaidInEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "RecurringPaymentEvent";
    required google.protobuf.Timestamp lastUpdated = 1 [(scalapb.field).type = "java.time.Instant"];
    required string debitedAccount = 2;
    required int32 debitedAmount = 3;
    required int32 feesAmount = 4;
    required string currency = 5 [default = "EUR"];
    required string transactionId = 6;
    required string recurringPaymentRegistrationId = 7;
    required app.softnetwork.payment.model.RecurringPayment.RecurringPaymentFrequency frequency = 8;
    optional google.protobuf.Timestamp nextRecurringPaymentDate = 9 [(scalapb.field).type = "java.util.Date"];
}

message FirstRecurringCardPaymentFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "RecurringPaymentEvent";
    required string debitedAccount = 1;
    required string resultMessage = 2;
    required int32 debitedAmount = 3;
    required int32 feesAmount = 4;
    required string currency = 5 [default = "EUR"];
    optional app.softnetwork.payment.model.Transaction transaction = 6;
    required string recurringPaymentRegistrationId = 7;
    required app.softnetwork.payment.model.RecurringPayment.RecurringPaymentFrequency frequency = 8;
}

message NextRecurringPaidEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "RecurringPaymentEvent";
    required google.protobuf.Timestamp lastUpdated = 1 [(scalapb.field).type = "java.time.Instant"];
    required string debitedAccount = 2;
    required int32 debitedAmount = 3;
    required int32 feesAmount = 4;
    required string currency = 5 [default = "EUR"];
    required string transactionId = 6;
    required string recurringPaymentRegistrationId = 7;
    required app.softnetwork.payment.model.RecurringPayment.RecurringPaymentType type = 8;
    required app.softnetwork.payment.model.RecurringPayment.RecurringPaymentFrequency frequency = 9;
    required int32 numberOfRecurringPayments = 10;
    optional google.protobuf.Timestamp nextRecurringPaymentDate = 11 [(scalapb.field).type = "java.util.Date"];
    required int32 cumulatedDebitedAmount = 12;
    required int32 cumulatedFeesAmount = 13;
}

message NextRecurringPaymentFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "RecurringPaymentEvent";
    required string debitedAccount = 1;
    required string resultMessage = 2;
    required int32 debitedAmount = 3;
    required int32 feesAmount = 4;
    required string currency = 5 [default = "EUR"];
    optional app.softnetwork.payment.model.Transaction transaction = 6;
    required string recurringPaymentRegistrationId = 7;
    required app.softnetwork.payment.model.RecurringPayment.RecurringPaymentType type = 8;
    required app.softnetwork.payment.model.RecurringPayment.RecurringPaymentFrequency frequency = 9;
    required int32 numberOfRecurringPayments = 10;
    optional google.protobuf.Timestamp lastRecurringPaymentDate = 11 [(scalapb.field).type = "java.util.Date"];
}

message PreAuthorizationCanceledEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "DebitedAccountEvent";
    required google.protobuf.Timestamp lastUpdated = 1 [(scalapb.field).type = "java.time.Instant"];
    required string debitedAccount = 2;
    required string orderUuid = 3;
    required string preAuthorizedTransactionId = 4;
    required bool preAuthorizationCanceled = 5;
}

message TransactionUpdatedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "Updated[Transaction]";
    option (scalapb.message).extends = "TransactionEvent";
    required app.softnetwork.payment.model.Transaction document = 1;
    required google.protobuf.Timestamp lastUpdated = 2 [(scalapb.field).type = "java.time.Instant"];
}